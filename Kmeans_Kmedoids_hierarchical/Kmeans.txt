# Installing Packages
install.packages("ClusterR")
install.packages("cluster")

# Loading package
library(ClusterR)
library(cluster)

# Removing initial label of
# Species from original dataset
iris_1 <- iris[, -5]

# Fitting K-Means clustering Model
# to training dataset
set.seed(240) # Setting seed
kmeans.re <- kmeans(iris_1, centers = 3, nstart = 20)
kmeans.re

# Cluster identification for
# each observation
kmeans.re$cluster

# Confusion Matrix
cm <- table(iris$Species, kmeans.re$cluster)
cm

# Model Evaluation and visualization
plot(iris_1[c("Sepal.Length", "Sepal.Width")])
plot(iris_1[c("Sepal.Length", "Sepal.Width")],
	col = kmeans.re$cluster)
plot(iris_1[c("Sepal.Length", "Sepal.Width")],
	col = kmeans.re$cluster,
	main = "K-means with 3 clusters")

## Plotiing cluster centers
kmeans.re$centers
kmeans.re$centers[, c("Sepal.Length", "Sepal.Width")]

# cex is font size, pch is symbol
points(kmeans.re$centers[, c("Sepal.Length", "Sepal.Width")],
	col = 1:3, pch = 8, cex = 3)

## Visualizing clusters
y_kmeans <- kmeans.re$cluster
clusplot(iris_1[, c("Sepal.Length", "Sepal.Width")],
		y_kmeans,
		lines = 0,
		shade = TRUE,
		color = TRUE,
		labels = 2,
		plotchar = FALSE,
		span = TRUE,
		main = paste("Cluster iris"),
		xlab = 'Sepal.Length',
		ylab = 'Sepal.Width')







#kmean without using inbuilt functions
# Load iris dataset
data(iris)

# Select numeric columns
data <- iris[, 1:4]

# Set number of clusters K
K <- 3

# Initialize cluster centroids randomly
centroids <- data[sample(nrow(data), K), ]

# Set maximum number of iterations
max_iter <- 100

# Initialize distance matrix and cluster assignments
dist_mat <- matrix(0, nrow(data), K)
cluster_assignments <- rep(0, nrow(data))

# Perform K-means clustering algorithm
for (iter in 1:max_iter) {
  # Calculate distances between each data point and each centroid
  for (k in 1:K) {
    dist_mat[, k] <- apply(data, 1, function(x) sum((x - centroids[k, ]) ^ 2))
  }
  
  # Assign each data point to the nearest centroid
  cluster_assignments <- apply(dist_mat, 1, which.min)
  
  # Update cluster centroids
  for (k in 1:K) {
    centroids[k, ] <- apply(data[cluster_assignments == k, ], 2, mean)
  }
}

# Print final cluster assignments
cat("Final cluster assignments:", cluster_assignments)
